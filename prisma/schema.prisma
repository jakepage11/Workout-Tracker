// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model users {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  name String
  hashedPassword String?
  image String?
  createdAt DateTime
  updatedAt DateTime
}

model workouts {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user String @unique
  exercises Exercise[]
  date DateTime
  type String
  completeIn Int
}

type Exercise {
  id String 
  name String
  reps Float[]
  load Float[]
  difficulty Int
}

model exercises {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  muscles String[]
  tags String[]
  level String
  link String
  equipment String[]
  popularity Float
  people_req Int
  description String
}

// model Account {
//   id                 String  @id @default(cuid()) @map("_id")
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid()) @map("_id")
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//   id            String    @id @default(cuid()) @map("_id")
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   image         String?
//   Account       Account[]
//   Session       Session[]
// }

// model VerificationRequest {
//   id         String   @id @default(cuid()) @map("_id")
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   @@unique([identifier, token])
// }
